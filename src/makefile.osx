# -*- mode: Makefile; -*-
# Copyright (c) 2011 Bitcoin Developers
# Copyright (c) Bean Core www.bitbean.org
# Distributed under the MIT/X11 software license, see the accompanying
# file COPYING or http://www.opensource.org/licenses/mit-license.php.

# Mac OS X makefile for BitBean
# Originally by Laszlo Hanyecz (solar@heliacal.net)

CXX=clang++
DEPSDIR=/opt/local

INCLUDEPATHS= \
 -I"$(CURDIR)" \
 -I"$(CURDIR)"/obj \
 -I"$(DEPSDIR)/include" \
 -I"$(DEPSDIR)/include/db53"

LIBPATHS= \
 -L"$(DEPSDIR)/lib" \
 -L"$(DEPSDIR)/lib/db53"

LIBS= -dead_strip
LIBS += -framework IOKit

ifdef STATIC
# Build STATIC if you are redistributing the BitBeand binary
LIBS += \
 $(DEPSDIR)/lib/db53/libdb_cxx-5.3.a \
 $(DEPSDIR)/lib/libboost_system-mt.a \
 $(DEPSDIR)/lib/libboost_filesystem-mt.a \
 $(DEPSDIR)/lib/libboost_program_options-mt.a \
 $(DEPSDIR)/lib/libboost_thread-mt.a \
 $(DEPSDIR)/lib/libssl.a \
 $(DEPSDIR)/lib/libcrypto.a \
 -lz
else
LIBS += \
 -ldb_cxx-4.8 \
 -lboost_system-mt \
 -lboost_filesystem-mt \
 -lboost_program_options-mt \
 -lboost_thread-mt \
 -lssl \
 -lcrypto \
 -lz
endif

DEFS=-DMAC_OSX -DMSG_NOSIGNAL=0 -DBOOST_SPIRIT_THREADSAFE

ifdef RELEASE
# Compile for maximum compatibility and smallest size.
# This requires that dependencies are compiled
# the same way.
CFLAGS = -mmacosx-version-min=10.5 -arch x86_64 -O3 -msse2
else
CFLAGS = -g -msse2
endif

# ppc doesn't work because we don't support big-endian
CFLAGS += -Wall -Wextra -Wformat -Wno-ignored-qualifiers -Wformat-security -Wno-unused-parameter \
    $(DEBUGFLAGS) $(DEFS) $(INCLUDEPATHS)

OBJS= \
    obj/alert.o \
    obj/version.o \
    obj/checkpoints.o \
    obj/netbase.o \
    obj/addrman.o \
    obj/crypter.o \
    obj/key.o \
    obj/db.o \
    obj/init.o \
    obj/keystore.o \
    obj/core.o \
    obj/main.o \
    obj/miner.o \
    obj/net.o \
    obj/protocol.o \
    obj/bitbeanrpc.o \
    obj/rpcdump.o \
    obj/rpcnet.o \
    obj/rpcmining.o \
    obj/rpcwallet.o \
    obj/rpcblockchain.o \
    obj/rpcrawtransaction.o \
    obj/script.o \
    obj/sync.o \
    obj/util.o \
    obj/wallet.o \
    obj/walletdb.o \
    obj/noui.o \
    obj/hash.o \
    obj/pbkdf2.o \
    obj/kernel.o \
    obj/chainparams.o
    
all: BitBeand

LIBS += $(CURDIR)/leveldb/libleveldb.a $(CURDIR)/leveldb/libmemenv.a
DEFS += $(addprefix -I,$(CURDIR)/leveldb/include)
DEFS += $(addprefix -I,$(CURDIR)/leveldb/helpers)
OBJS += obj/txdb-leveldb.o
leveldb/libleveldb.a:
	@echo "Building LevelDB ..."; cd leveldb; make libleveldb.a libmemenv.a; cd ..
obj/txdb-leveldb.o: leveldb/libleveldb.a

# auto-generated dependencies:
-include obj/*.P

obj/build.h: FORCE
	/bin/sh ../share/genbuild.sh obj/build.h
version.cpp: obj/build.h
DEFS += -DHAVE_BUILD_INFO

obj/%.o: %.cpp
	$(CXX) -c $(CFLAGS) -MMD -MF $(@:%.o=%.d) -o $@ $<
	@cp $(@:%.o=%.d) $(@:%.o=%.P); \
	  sed -e 's/#.*//' -e 's/^[^:]*: *//' -e 's/ *\\$$//' \
	      -e '/^$$/ d' -e 's/$$/ :/' < $(@:%.o=%.d) >> $(@:%.o=%.P); \
	  rm -f $(@:%.o=%.d)

BitBeand: $(OBJS:obj/%=obj/%)
	$(CXX) $(CFLAGS) -o $@ $(LIBPATHS) $^ $(LIBS)

clean:
	-rm -f BitBeand
	-rm -f obj/*.o
	-rm -f obj/*.P
	-rm -f obj/build.h

FORCE:
