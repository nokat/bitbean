// Copyright (c) 2012-2013 The PPCoin developers
// Copyright (c) 2015-217 Bean Core wwww.beancash.org
// Distributed under the MIT/X11 software license, see the accompanying
// file COPYING or http://www.opensource.org/licenses/mit-license.php.

#include <boost/assign/list_of.hpp>

#include "kernel.h"
#include "txdb.h"

using namespace std;

typedef std::map<int, unsigned int> MapModifierCheckpoints;

// Hard checkpoints of sprout modifiers to ensure they are deterministic
static std::map<int, unsigned int> mapSproutModifierCheckpoints =
    boost::assign::map_list_of
	(0, 0xfd11f4e7)
    ;

// Hard checkpoints of sprout modifiers to ensure they are deterministic (testNet)
static std::map<int, unsigned int> mapSproutModifierCheckpointsTestNet =
    boost::assign::map_list_of
	(0, 0x0e00670b)
    ;

// Get time weight
int64_t GetWeight(int64_t nIntervalBeginning, int64_t nIntervalEnd)
{
    // Kernel hash weight starts from 0 at the min age
    // this change increases active beans participating the hash and helps
    // to secure the network when proof-of-sprout difficulty is low

    return min(nIntervalEnd - nIntervalBeginning - nSproutMinAge, (int64_t)nSproutMaxAge);
}

// Get the last sprout modifier and its generation time from a given block
static bool GetLastSproutModifier(const CBlockIndex* pindex, uint64_t& nSproutModifier, int64_t& nModifierTime)
{
    if (!pindex)
        return error("GetLastSproutModifier: null pindex");
    while (pindex && pindex->pprev && !pindex->GeneratedSproutModifier())
        pindex = pindex->pprev;
    if (!pindex->GeneratedSproutModifier())
        return error("GetLastSproutModifier: no generation at genesis block");
    nSproutModifier = pindex->nSproutModifier;
    nModifierTime = pindex->GetBlockTime();
    return true;
}

// Get selection interval section (in seconds)
static int64_t GetSproutModifierSelectionIntervalSection(int nSection)
{
    assert (nSection >= 0 && nSection < 64);
    return (nModifierInterval * 63 / (63 + ((63 - nSection) * (MODIFIER_INTERVAL_RATIO - 1))));
}

// Get sprout modifier selection interval (in seconds)
static int64_t GetSproutModifierSelectionInterval()
{
    int64_t nSelectionInterval = 0;
    for (int nSection=0; nSection<64; nSection++)
        nSelectionInterval += GetSproutModifierSelectionIntervalSection(nSection);
    return nSelectionInterval;
}

// select a block from the candidate blocks in vSortedByTimestamp, excluding
// already selected blocks in vSelectedBlocks, and with timestamp up to
// nSelectionIntervalStop.
static bool SelectBlockFromCandidates(vector<pair<int64_t, uint256> >& vSortedByTimestamp, map<uint256, const CBlockIndex*>& mapSelectedBlocks,
    int64_t nSelectionIntervalStop, uint64_t nSproutModifierPrev, const CBlockIndex** pindexSelected)
{
    bool fSelected = false;
    uint256 hashBest = 0;
    *pindexSelected = (const CBlockIndex*) 0;
    for (const std::pair<int64_t, uint256>& item : vSortedByTimestamp)
    {
        if (!mapBlockIndex.count(item.second))
            return error("SelectBlockFromCandidates: failed to find block index for candidate block %s", item.second.ToString().c_str());
        const CBlockIndex* pindex = mapBlockIndex[item.second];
        if (fSelected && pindex->GetBlockTime() > nSelectionIntervalStop)
            break;
        if (mapSelectedBlocks.count(pindex->GetBlockHash()) > 0)
            continue;
        // compute the selection hash by hashing its proof-hash and the
        // previous proof-of-sprout modifier
        CDataStream ss(SER_GETHASH, 0);
        ss << pindex->hashProof << nSproutModifierPrev;
        uint256 hashSelection = Hash(ss.begin(), ss.end());
        // the selection hash is divided by 2**32 so that proof-of-sprout block
        // is always favored over proof-of-work block. this is to preserve
        // the energy efficiency property
        if (pindex->IsProofOfSprout())
            hashSelection >>= 32;
        if (fSelected && hashSelection < hashBest)
        {
            hashBest = hashSelection;
            *pindexSelected = (const CBlockIndex*) pindex;
        }
        else if (!fSelected)
        {
            fSelected = true;
            hashBest = hashSelection;
            *pindexSelected = (const CBlockIndex*) pindex;
        }
    }
    if (fDebug && GetBoolArg("-printsproutmodifier"))
        printf("SelectBlockFromCandidates: selection hash=%s\n", hashBest.ToString().c_str());
    return fSelected;
}

// Sprout Modifier (hash modifier of proof-of-sprout):
// The purpose of sprout modifier is to prevent a txout (bean) owner from
// computing future proof-of-sprout generated by this txout at the time
// of transaction confirmation. To meet kernel protocol, the txout
// must hash with a future sprout modifier to generate the proof.
// Sprout modifier consists of bits each of which is contributed from a
// selected block of a given block group in the past.
// The selection of a block is based on a hash of the block's proof-hash and
// the previous sprout modifier.
// Sprout modifier is recomputed at a fixed time interval instead of every
// block. This is to make it difficult for an attacker to gain control of
// additional bits in the sprout modifier, even after generating a chain of
// blocks.
bool ComputeNextSproutModifier(const CBlockIndex* pindexPrev, uint64_t& nSproutModifier, bool& fGeneratedSproutModifier)
{
    nSproutModifier = 0;
    fGeneratedSproutModifier = false;
    if (!pindexPrev)
    {
        fGeneratedSproutModifier = true;
        return true;  // genesis block's modifier is 0
    }
    // First find current sprout modifier and its generation block time
    // if it's not old enough, return the same sprout modifier
    int64_t nModifierTime = 0;
    if (!GetLastSproutModifier(pindexPrev, nSproutModifier, nModifierTime))
        return error("ComputeNextSproutModifier: unable to get last modifier");
    if (fDebug)
    {
        printf("ComputeNextSproutModifier: prev modifier=0x%016" PRIx64 " time=%s\n", nSproutModifier, DateTimeStrFormat(nModifierTime).c_str());
    }
    if (nModifierTime / nModifierInterval >= pindexPrev->GetBlockTime() / nModifierInterval)
        return true;

    // Sort candidate blocks by timestamp
    vector<pair<int64_t, uint256> > vSortedByTimestamp;
    vSortedByTimestamp.reserve(64 * nModifierInterval / nTargetSpacing);
    int64_t nSelectionInterval = GetSproutModifierSelectionInterval();
    int64_t nSelectionIntervalStart = (pindexPrev->GetBlockTime() / nModifierInterval) * nModifierInterval - nSelectionInterval;
    const CBlockIndex* pindex = pindexPrev;
    while (pindex && pindex->GetBlockTime() >= nSelectionIntervalStart)
    {
        vSortedByTimestamp.push_back(make_pair(pindex->GetBlockTime(), pindex->GetBlockHash()));
        pindex = pindex->pprev;
    }
    int nHeightFirstCandidate = pindex ? (pindex->nHeight + 1) : 0;
    reverse(vSortedByTimestamp.begin(), vSortedByTimestamp.end());
    sort(vSortedByTimestamp.begin(), vSortedByTimestamp.end());

    // Select 64 blocks from candidate blocks to generate sprout modifier
    uint64_t nSproutModifierNew = 0;
    int64_t nSelectionIntervalStop = nSelectionIntervalStart;
    map<uint256, const CBlockIndex*> mapSelectedBlocks;
    for (int nRound=0; nRound<min(64, (int)vSortedByTimestamp.size()); nRound++)
    {
        // add an interval section to the current selection round
        nSelectionIntervalStop += GetSproutModifierSelectionIntervalSection(nRound);
        // select a block from the candidates of current round
        if (!SelectBlockFromCandidates(vSortedByTimestamp, mapSelectedBlocks, nSelectionIntervalStop, nSproutModifier, &pindex))
            return error("ComputeNextSproutModifier: unable to select block at round %d", nRound);
        // write the entropy bit of the selected block
        nSproutModifierNew |= (((uint64_t)pindex->GetSproutEntropyBit()) << nRound);
        // add the selected block from candidates to selected list
        mapSelectedBlocks.insert(make_pair(pindex->GetBlockHash(), pindex));
        if (fDebug && GetBoolArg("-printsproutmodifier"))
            printf("ComputeNextSproutModifier: selected round %d stop=%s height=%d bit=%d\n", nRound, DateTimeStrFormat(nSelectionIntervalStop).c_str(), pindex->nHeight, pindex->GetSproutEntropyBit());
    }

    // Print selection map for visualization of the selected blocks
    if (fDebug && GetBoolArg("-printsproutmodifier"))
    {
        string strSelectionMap = "";
        // '-' indicates proof-of-work blocks not selected
        strSelectionMap.insert(0, pindexPrev->nHeight - nHeightFirstCandidate + 1, '-');
        pindex = pindexPrev;
        while (pindex && pindex->nHeight >= nHeightFirstCandidate)
        {
            // '=' indicates proof-of-sprout blocks not selected
            if (pindex->IsProofOfSprout())
                strSelectionMap.replace(pindex->nHeight - nHeightFirstCandidate, 1, "=");
            pindex = pindex->pprev;
        }
        for (const std::pair<uint256, const CBlockIndex*>& item : mapSelectedBlocks)
        {
            // 'S' indicates selected proof-of-sprout blocks
            // 'W' indicates selected proof-of-work blocks
            strSelectionMap.replace(item.second->nHeight - nHeightFirstCandidate, 1, item.second->IsProofOfSprout()? "S" : "W");
        }
        printf("ComputeNextSproutModifier: selection height [%d, %d] map %s\n", nHeightFirstCandidate, pindexPrev->nHeight, strSelectionMap.c_str());
    }
    if (fDebug)
    {
        printf("ComputeNextSproutModifier: new modifier=0x%016" PRIx64 " time=%s\n", nSproutModifierNew, DateTimeStrFormat(pindexPrev->GetBlockTime()).c_str());
    }

    nSproutModifier = nSproutModifierNew;
    fGeneratedSproutModifier = true;
    return true;
}

// The sprout modifier used to hash for a sprout kernel is chosen as the sprout
// modifier about a selection interval later than the bean generating the kernel
static bool GetKernelSproutModifier(uint256 hashBlockFrom, uint64_t& nSproutModifier, int& nSproutModifierHeight, int64_t& nSproutModifierTime, bool fPrintProofOfSprout)
{
    nSproutModifier = 0;
    if (!mapBlockIndex.count(hashBlockFrom))
        return error("GetKernelSproutModifier() : block not indexed");
    const CBlockIndex* pindexFrom = mapBlockIndex[hashBlockFrom];
    nSproutModifierHeight = pindexFrom->nHeight;
    nSproutModifierTime = pindexFrom->GetBlockTime();
    int64_t nSproutModifierSelectionInterval = GetSproutModifierSelectionInterval();
    const CBlockIndex* pindex = pindexFrom;
    // loop to find the sprout modifier later by a selection interval
    while (nSproutModifierTime < pindexFrom->GetBlockTime() + nSproutModifierSelectionInterval)
    {
        if (!pindex->pnext)
        {   // reached best block; may happen if node is behind on block chain
            if (fPrintProofOfSprout || (pindex->GetBlockTime() + nSproutMinAge - nSproutModifierSelectionInterval > GetAdjustedTime()))
                return error("GetKernelSproutModifier() : reached best block %s at height %d from block %s",
                    pindex->GetBlockHash().ToString().c_str(), pindex->nHeight, hashBlockFrom.ToString().c_str());
            else
                return false;
        }
        pindex = pindex->pnext;
        if (pindex->GeneratedSproutModifier())
        {
            nSproutModifierHeight = pindex->nHeight;
            nSproutModifierTime = pindex->GetBlockTime();
        }
    }
    nSproutModifier = pindex->nSproutModifier;
    return true;
}

// bitbean kernel protocol
// beans sprouting must meet hash target according to the protocol:
// kernel (input 0) must meet the formula
//     hash(nSproutModifier + txPrev.block.nTime + txPrev.offset + txPrev.nTime + txPrev.vout.n + nTime) < bnTarget * nBeanDayWeight
// this ensures that the chance of getting a newly sprouted bean is proportional to the
// amount of bean age one owns.
// The reason this hash is chosen is the following:
//   nSproutModifier: scrambles computation to make it very difficult to precompute
//                  future proof-of-sprout at the time of the bean's confirmation
//   txPrev.block.nTime: prevent nodes from guessing a good timestamp to
//                       generate transaction for future advantage
//   txPrev.offset: offset of txPrev inside block, to reduce the chance of
//                  nodes generating beansprout at the same time
//   txPrev.nTime: reduce the chance of nodes generating beamsprout at the same
//                 time
//   txPrev.vout.n: output number of txPrev, to reduce the chance of nodes
//                  generating beansprout at the same time
//   block/tx hash should not be used here as they can be generated in vast
//   quantities so as to generate blocks faster, degrading the system back into
//   a proof-of-work situation.
//
bool CheckSproutKernelHash(unsigned int nBits, const CBlock& blockFrom, unsigned int nTxPrevOffset, const CTransaction& txPrev, const COutPoint& prevout, unsigned int nTimeTx, uint256& hashProofOfSprout, uint256& targetProofOfSprout, bool fPrintProofOfSprout)
{
    if (nTimeTx < txPrev.nTime)  // Transaction timestamp violation
        return error("CheckSproutKernelHash() : nTime violation");

    unsigned int nTimeBlockFrom = blockFrom.GetBlockTime();
    if (nTimeBlockFrom + nSproutMinAge > nTimeTx) // Min age requirement
        return error("CheckSproutKernelHash() : min age violation");

    uint256 bnTargetPerBeanDay;
    bnTargetPerBeanDay.SetCompact(nBits);
    int64_t nValueIn = txPrev.vout[prevout.n].nValue;

    uint256 hashBlockFrom = blockFrom.GetHash();

    uint256 bnBeanDayWeight = uint256(nValueIn) * GetWeight((int64_t)txPrev.nTime, (int64_t)nTimeTx) / bean / (24 * 60 * 60);
    targetProofOfSprout = (bnBeanDayWeight * bnTargetPerBeanDay).getuint256();

    // Calculate hash
    CDataStream ss(SER_GETHASH, 0);
    uint64_t nSproutModifier = 0;
    int nSproutModifierHeight = 0;
    int64_t nSproutModifierTime = 0;

    if (!GetKernelSproutModifier(hashBlockFrom, nSproutModifier, nSproutModifierHeight, nSproutModifierTime, fPrintProofOfSprout))
        return false;
    ss << nSproutModifier;

    ss << nTimeBlockFrom << nTxPrevOffset << txPrev.nTime << prevout.n << nTimeTx;
    hashProofOfSprout = Hash(ss.begin(), ss.end());
    if (fPrintProofOfSprout)
    {
        printf("CheckSproutKernelHash() : using modifier 0x%016" PRIx64 " at height=%d timestamp=%s for block from height=%d timestamp=%s\n",
            nSproutModifier, nSproutModifierHeight,
            DateTimeStrFormat(nSproutModifierTime).c_str(),
            mapBlockIndex[hashBlockFrom]->nHeight,
            DateTimeStrFormat(blockFrom.GetBlockTime()).c_str());
        printf("CheckSproutKernelHash() : check modifier=0x%016" PRIx64 " nTimeBlockFrom=%u nTxPrevOffset=%u nTimeTxPrev=%u nPrevout=%u nTimeTx=%u hashProof=%s\n",
            nSproutModifier,
            nTimeBlockFrom, nTxPrevOffset, txPrev.nTime, prevout.n, nTimeTx,
            hashProofOfSprout.ToString().c_str());
    }

    // Now check if proof-of-sprout hash meets target protocol
    if (uint256(hashProofOfSprout) > bnBeanDayWeight * bnTargetPerBeanDay)
        return false;
    if (fDebug && !fPrintProofOfSprout)
    {
        printf("CheckSproutKernelHash() : using modifier 0x%016" PRIx64 " at height=%d timestamp=%s for block from height=%d timestamp=%s\n",
            nSproutModifier, nSproutModifierHeight,
            DateTimeStrFormat(nSproutModifierTime).c_str(),
            mapBlockIndex[hashBlockFrom]->nHeight,
            DateTimeStrFormat(blockFrom.GetBlockTime()).c_str());
        printf("CheckSproutKernelHash() : pass modifier=0x%016" PRIx64 " nTimeBlockFrom=%u nTxPrevOffset=%u nTimeTxPrev=%u nPrevout=%u nTimeTx=%u hashProof=%s\n",
            nSproutModifier,
            nTimeBlockFrom, nTxPrevOffset, txPrev.nTime, prevout.n, nTimeTx,
            hashProofOfSprout.ToString().c_str());
    }
    return true;
}

// Check kernel hash target and beansprout signature
bool CheckProofOfSprout(const CTransaction& tx, unsigned int nBits, uint256& hashProofOfSprout, uint256& targetProofOfSprout)
{
    if (!tx.IsBeanSprout())
        return error("CheckProofOfSprout() : called on non-beansprout %s", tx.GetHash().ToString().c_str());

    // Kernel (input 0) must match the sprout hash target per bean age (nBits)
    const CTxIn& txin = tx.vin[0];

    // First try finding the previous transaction in database
    CTxDB txdb("r");
    CTransaction txPrev;
    CTxIndex txindex;
    if (!txPrev.ReadFromDisk(txdb, txin.prevout, txindex))
        return tx.DoS(1, error("CheckProofOfSprout() : INFO: read txPrev failed"));  // previous transaction not in main chain, may occur during initial download

    // Verify signature
    if (!VerifySignature(txPrev, tx, 0, false, 0))
        return tx.DoS(100, error("CheckProofOfSprout() : VerifySignature failed on beansprout %s", tx.GetHash().ToString().c_str()));

    // Read block header
    CBlock block;
    if (!block.ReadFromDisk(txindex.pos.nFile, txindex.pos.nBlockPos, false))
        return fDebug? error("CheckProofOfSprout() : read block failed") : false; // unable to read block of previous transaction

    if (!CheckSproutKernelHash(nBits, block, txindex.pos.nTxPos - txindex.pos.nBlockPos, txPrev, txin.prevout, tx.nTime, hashProofOfSprout, targetProofOfSprout, fDebug))
        return tx.DoS(1, error("CheckProofOfSprout() : INFO: check kernel failed on beansprout %s, hashProof=%s", tx.GetHash().ToString().c_str(), hashProofOfSprout.ToString().c_str())); // may occur during initial download or if behind on block chain sync

    return true;
}

// Check whether the beansprout timestamp meets protocol
bool CheckBeanSproutTimestamp(int64_t nTimeBlock, int64_t nTimeTx)
{
    // v0.3 protocol
    return (nTimeBlock == nTimeTx);
}

// Get sprout modifier checksum
unsigned int GetSproutModifierChecksum(const CBlockIndex* pindex)
{
    //assert (pindex->pprev || pindex->GetBlockHash() == (Params().HashGenesisBlock());
    // Hash previous checksum with flags, hashProofOfSprout and nSproutModifier
    CDataStream ss(SER_GETHASH, 0);
    if (pindex->pprev)
        ss << pindex->pprev->nSproutModifierChecksum;
    ss << pindex->nFlags << (pindex->IsProofOfSprout() ? pindex->hashProof : 0) << pindex->nSproutModifier;
    uint256 hashChecksum = Hash(ss.begin(), ss.end());
    hashChecksum >>= (256 - 32);
    return hashChecksum.Get64();
}

// Check sprout modifier hard checkpoints
bool CheckSproutModifierCheckpoints(int nHeight, unsigned int nSproutModifierChecksum)
{
    MapModifierCheckpoints& checkpoints = (TestNet() ? mapSproutModifierCheckpointsTestNet : mapSproutModifierCheckpoints);

    if (checkpoints.count(nHeight))
        return nSproutModifierChecksum == checkpoints[nHeight];
    return true;
}
